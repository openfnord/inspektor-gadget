// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadIterTCP returns the embedded CollectionSpec for iterTCP.
func loadIterTCP() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_IterTCPBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load iterTCP: %w", err)
	}

	return spec, err
}

// loadIterTCPObjects loads iterTCP and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*iterTCPObjects
//	*iterTCPPrograms
//	*iterTCPMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadIterTCPObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadIterTCP()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// iterTCPSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iterTCPSpecs struct {
	iterTCPProgramSpecs
	iterTCPMapSpecs
}

// iterTCPSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iterTCPProgramSpecs struct {
	IgSnapTcp *ebpf.ProgramSpec `ebpf:"ig_snap_tcp"`
}

// iterTCPMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iterTCPMapSpecs struct {
}

// iterTCPObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadIterTCPObjects or ebpf.CollectionSpec.LoadAndAssign.
type iterTCPObjects struct {
	iterTCPPrograms
	iterTCPMaps
}

func (o *iterTCPObjects) Close() error {
	return _IterTCPClose(
		&o.iterTCPPrograms,
		&o.iterTCPMaps,
	)
}

// iterTCPMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadIterTCPObjects or ebpf.CollectionSpec.LoadAndAssign.
type iterTCPMaps struct {
}

func (m *iterTCPMaps) Close() error {
	return _IterTCPClose()
}

// iterTCPPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadIterTCPObjects or ebpf.CollectionSpec.LoadAndAssign.
type iterTCPPrograms struct {
	IgSnapTcp *ebpf.Program `ebpf:"ig_snap_tcp"`
}

func (p *iterTCPPrograms) Close() error {
	return _IterTCPClose(
		p.IgSnapTcp,
	)
}

func _IterTCPClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed itertcp_bpfel.o
var _IterTCPBytes []byte
